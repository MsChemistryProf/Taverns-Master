-- NOTE: THE BEGINNING IS CreateDB and PopulateDB from Assignment #1 all together in one file...
--
-- Assignment #2 activities ARE PENDED AT THE BOTTOM.
--

DROP TABLE IF EXISTS Levels;
DROP TABLE IF EXISTS Class;
DROP TABLE IF EXISTS Sales;
DROP TABLE IF EXISTS Receivables;
DROP TABLE IF EXISTS Inventory;
DROP TABLE IF EXISTS Service;
DROP TABLE IF EXISTS Status;
DROP TABLE IF EXISTS Supplies;
DROP TABLE IF EXISTS Guests;
DROP TABLE IF EXISTS Guest_Status;
DROP TABLE IF EXISTS Rats;
DROP TABLE IF EXISTS Taverns;
DROP TABLE IF EXISTS Users;
DROP TABLE IF EXISTS Roles;
DROP TABLE IF EXISTS Locations;

CREATE TABLE Locations(
	LocationID int IDENTITY(1,1) PRIMARY KEY,
	LocationName varchar(50)
);

CREATE TABLE Roles(
	RoleID int IDENTITY(1,1) PRIMARY KEY,
	RoleName varchar(50) NOT NULL,
	RoleDescription varchar(100)
);

CREATE TABLE Users(
	UserID int IDENTITY(1,1) PRIMARY KEY,
	UserName varchar(50) NOT NULL,
	UserInfo varchar(100),
	UserRole int FOREIGN KEY REFERENCES Roles(RoleID)
);

CREATE TABLE Taverns (
	TavernID int IDENTITY(1, 1) PRIMARY KEY,
	TavernName varchar(50) NOT NULL,
	NumFloors tinyint NOT NULL,
	TavernLocation int FOREIGN KEY REFERENCES Locations(LocationID),
    TavernOwner int FOREIGN KEY REFERENCES Users(UserID)
);

CREATE TABLE Rats(
	RatID int IDENTITY(1,1) PRIMARY KEY,
	RatName varchar(30) NOT NULL,
	RatTavern int FOREIGN KEY REFERENCES Taverns(TavernID)
);

CREATE TABLE Guests(
	GuestID int IDENTITY(1,1) PRIMARY KEY,
	GuestName varchar(50) NOT NULL
);

CREATE TABLE Supplies(
	SupplyID int IDENTITY(1,1) PRIMARY KEY,
	SupplyName varchar(30) NOT NULL,
	SupplyUnit varchar(10) NOT NULL
);

CREATE TABLE Status(
	StatusID int IDENTITY(1,1) PRIMARY KEY,
	StatusName varchar(30) NOT NULL
);

CREATE TABLE Service(
	ServiceID int IDENTITY(1,1) PRIMARY KEY,
	ServiceName varchar(30) NOT NULL,
	ServiceStatusID int FOREIGN KEY REFERENCES Status(StatusID)
);

CREATE TABLE Inventory(
	TavernID int FOREIGN KEY REFERENCES Taverns(TavernID),
	SupplyID int FOREIGN KEY REFERENCES Supplies(SupplyID),
	DateLastUpdated smalldatetime NOT NULL,
	CurrentCount smallint NOT NULL
);

CREATE TABLE Receivables(
	ReceivableID int IDENTITY(1,1) PRIMARY KEY,
	SupplyID int FOREIGN KEY REFERENCES Supplies(SupplyID),
	TavernID int FOREIGN KEY REFERENCES Taverns(TavernID),
	cost smallmoney NOT NULL,
	UnitsReceived decimal(5,1) NOT NULL,
	DateReceived smalldatetime NOT NULL
);

CREATE TABLE Sales(
	SaleID int IDENTITY(1,1) PRIMARY KEY,
	ServiceID int FOREIGN KEY REFERENCES Service(ServiceID),
	GuestID int FOREIGN KEY REFERENCES Guests(GuestID),
	TotalPrice smallmoney NOT NULL,
	DateOfSale smalldatetime NOT NULL,
	AmountPurchased decimal(5,1) NOT NULL,
	TavernID int FOREIGN KEY REFERENCES Taverns(TavernID)
);

INSERT INTO Locations VALUES ('Islington');
INSERT INTO Locations VALUES ('Dublin');
INSERT INTO Locations VALUES ('Scotland');
INSERT INTO Locations VALUES ('Mt.Holly');
INSERT INTO Locations VALUES ('Shamong');
INSERT INTO Locations VALUES ('Waterford');
INSERT INTO Locations VALUES ('Germany');


INSERT INTO Roles (RoleName, RoleDescription) VALUES ('Owner', 'Sole Owner of this tavern');
INSERT INTO Roles (RoleName, RoleDescription) VALUES ('Proprietor', 'Master of the House');
INSERT INTO Roles (RoleName, RoleDescription) VALUES ('Barman', 'All around Awesome Person');


INSERT INTO Users (UserName, UserInfo, UserRole) VALUES ('Hagrid', 'groundskeeper', 2);
INSERT INTO Users (UserName, UserInfo, UserRole) VALUES ('Bill', 'some douche canoe', 1);
INSERT INTO Users (UserName, UserInfo, UserRole) VALUES ('Brian', 'bartender', 3);
INSERT INTO Users (UserName, UserInfo, UserRole) VALUES ('Carol', 'barmaid', 3);
INSERT INTO Users (UserName, UserInfo, UserRole) VALUES ('Voltenheimer', 'strong guy', 2);

INSERT INTO Taverns (TavernName, NumFloors, TavernLocation, TavernOwner) VALUES ('Horse and Groom', 2, 1, 1);
INSERT INTO Taverns (TavernName, NumFloors, TavernLocation, TavernOwner) VALUES ('Dunleavys', 3, 4, 3);
INSERT INTO Taverns (TavernName, NumFloors, TavernLocation, TavernOwner) VALUES ('Dadz', 1, 4, 2);
INSERT INTO Taverns (TavernName, NumFloors, TavernLocation, TavernOwner) VALUES ('Pic a Lilli', 2, 5, 1);
INSERT INTO Taverns (TavernName, NumFloors, TavernLocation, TavernOwner) VALUES ('Just One More', 1, 5, 1);
INSERT INTO Taverns (TavernName, NumFloors, TavernLocation, TavernOwner) VALUES ('Ye Olde Tavern', 2, 7, 5);


INSERT INTO Rats (RatName, RatTavern) VALUES ('Benjy', 1);
INSERT INTO Rats (RatName, RatTavern) VALUES ('Frankie', 1);
INSERT INTO Rats (RatNAME, RatTavern) VALUES ('Kelley', 2);
INSERT INTO Rats (RatNAME, RatTavern) VALUES ('Tony', 2);
INSERT INTO Rats (RatNAME, RatTavern) VALUES ('Jerry', 6);
INSERT INTO Rats (RatNAME, RatTavern) VALUES ('Kramer', 6);
INSERT INTO Rats (RatNAME, RatTavern) VALUES ('Stuart', 4);


INSERT INTO Guests (GuestName) VALUES ('Ford Prefect');
INSERT INTO Guests (GuestName) VALUES ('Arthur Dent');
INSERT INTO Guests (GuestName) VALUES ('Harry Potter');
INSERT INTO Guests (GuestName) VALUES ('Hermione Granger');
INSERT INTO Guests (GuestName) VALUES ('Spencer Hamilton');
INSERT INTO Guests (GuestName) VALUES ('Lisa Warren');
INSERT INTO Guests (GuestName) VALUES ('Zaphod Beeblebrox');
INSERT INTO Guests (GuestName) VALUES ('Tricia McMillan');

INSERT INTO Supplies (SupplyName, SupplyUnit) VALUES ('Guiness', 'pints');
INSERT INTO Supplies (SupplyName, SupplyUnit) VALUES ('Jack', 'mL');
INSERT INTO Supplies (SupplyName, SupplyUnit) VALUES ('CaptainMorgan', 'oz');

INSERT INTO Status (StatusName) VALUES ('out of stock');
INSERT INTO Status (StatusName) VALUES ('backordered');
INSERT INTO Status (StatusName) VALUES ('active');
INSERT INTO Status (StatusName) VALUES ('inactive');

INSERT INTO Service (ServiceName, ServiceStatusID) VALUES ('knife sharpening', 3);
INSERT INTO Service (ServiceName, ServiceStatusID) VALUES ('ice blocks', 1);
INSERT INTO Service (ServiceName, ServiceStatusID) VALUES ('beer to go', 3);
INSERT INTO Service (ServiceName, ServiceStatusID) VALUES ('weapon tinkering', 3);
INSERT INTO Service (ServiceName, ServiceStatusID) VALUES ('firewood', 3);
INSERT INTO Service (ServiceName, ServiceStatusID) VALUES ('quests', 3);

INSERT INTO Inventory (TavernID, SupplyID, DateLastUpdated, CurrentCount) VALUES (1, 1, '2019-09-16', 500);
INSERT INTO Inventory (TavernID, SupplyID, DateLastUpdated, CurrentCount) VALUES (2, 2, '2019-09-16', 20);
INSERT INTO Inventory (TavernID, SupplyID, DateLastUpdated, CurrentCount) VALUES (4, 3, '2019-09-01', 50);
INSERT INTO Inventory (TavernID, SupplyID, DateLastUpdated, CurrentCount) VALUES (5, 2, '2019-08-25', 150);
INSERT INTO Inventory (TavernID, SupplyID, DateLastUpdated, CurrentCount) VALUES (3, 1, '2019-08-15', 42);
INSERT INTO Inventory (TavernID, SupplyID, DateLastUpdated, CurrentCount) VALUES (6, 3, '2019-09-02', 24);
INSERT INTO Inventory (TavernID, SupplyID, DateLastUpdated, CurrentCount) VALUES (1, 2, '2019-09-16', 1020);


INSERT INTO Receivables (SupplyID, TavernID, cost, UnitsReceived, DateReceived) VALUES (1,1,200,100,'2019-09-16');
INSERT INTO Receivables (SupplyID, TavernID, cost, UnitsReceived, DateReceived) VALUES (2,2,100,100,'2019-09-16');
INSERT INTO Receivables (SupplyID, TavernID, cost, UnitsReceived, DateReceived) VALUES (3,6,50,50, '2019-09-01');

INSERT INTO Sales (ServiceID, GuestID, TotalPrice, DateOfSale, AmountPurchased, TavernID) VALUES (2,1,12.50, '2019-09-16', 4, 1);
INSERT INTO Sales (ServiceID, GuestID, TotalPrice, DateOfSale, AmountPurchased, TavernID) VALUES (3,2,10, '2019-09-16', 4, 1);
INSERT INTO Sales (ServiceID, GuestID, TotalPrice, DateOfSale, AmountPurchased, TavernID) VALUES (6,5,200, '2019-09-05', 1,6);
INSERT INTO Sales (ServiceID, GuestID, TotalPrice, DateOfSale, AmountPurchased, TavernID) VALUES (4,4,75, '2019-09-01', 1,2);


--ASSIGNMENT 2--

-- Item #1: Complete the user story. Track guests, notes, birthdays, cakedays and status. Track classes and levels. No longer track rats.

CREATE TABLE Guest_Status(
	GuestStatusID int IDENTITY (1,1) PRIMARY KEY,
	GuestStatusName varchar(15)
	);
	
INSERT INTO Guest_Status (GuestStatusName) VALUES
	('sick'),
	('hangry'),
	('fine'),
	('raging'),
	('placid');

ALTER TABLE Guests ADD
	GuestNotes varchar(50),
	GuestBirthday date,
	GuestCakeday date,
	GuestStatus int;

-- Update Guests table to include new column information

UPDATE Guests
	SET GuestNotes = 'Totally Hoopy Frood', GuestBirthday = '1974-12-19', GuestCakeday = '1988-07-25', GuestStatus = 5
WHERE GuestID = 1;

UPDATE Guests
	SET GuestNotes = 'Regular guy', GuestBirthday = '1970-01-01', GuestCakeday = '1997-03-15', GuestStatus = 2
WHERE GuestID = 2;

UPDATE Guests
	SET GuestNotes = 'Wizard Genius', GuestBirthday = '1980-02-05', GuestCakeday = '1995-01-25', GuestStatus = 3
WHERE GuestID = 3;

UPDATE Guests
	SET GuestNotes = 'Potions Master', GuestBirthday = '1981-04-25', GuestCakeday = '1995-01-25', GuestStatus = 3
WHERE GuestID = 4;

UPDATE Guests
	SET GuestNotes = 'Antisocial', GuestBirthday = '2004-07-22', GuestCakeday = '2015-07-22', GuestStatus = 4
WHERE GuestID = 5;

UPDATE Guests
	SET GuestNotes = 'Spurned wife', GuestBirthday = '1975-04-24', GuestCakeday = '2019-02-20', GuestStatus = 4
WHERE GuestID = 6;

UPDATE Guests
	SET GuestNotes = 'Three arms, two heads', GuestBirthday = '1965-02-14', GuestCakeday = '2000-03-12', GuestStatus = 1
WHERE GuestID = 7;

UPDATE Guests
	SET GuestNotes = 'Nickname: Trillian', GuestBirthday = '1973-05-30', GuestCakeday = '1994-06-01', GuestStatus = 3
WHERE GuestID = 8;


-- Add Foreign Key Constraint to Guests
ALTER TABLE Guests
	ADD FOREIGN KEY (GuestStatus) REFERENCES Guest_Status(GuestStatusID);


-- Track Classes and Levels
CREATE TABLE Class(
	ClassID int IDENTITY(1,1) PRIMARY KEY,
	ClassName varchar(15)
	);

INSERT INTO Class VALUES
	('Mage'),
	('Warrior'),
	('Knight'),
	('Palladin'),
	('Wizard');

-- Linking table that links levels and classes with guests
CREATE TABLE Levels(
	LevelID int IDENTITY(1,1) PRIMARY KEY,
	GuestID int FOREIGN KEY REFERENCES Guests(GuestID),
	Level tinyint,
	ClassID int FOREIGN KEY REFERENCES Class(ClassID),
	DateAchieved date
	);

INSERT INTO Levels VALUES
	(1,4,5,'09-16-2019'),
	(2,2,1,'09-16-2019'),
	(3,9,5,'09-16-2019'),
	(4,14,1,'09-16-2019'),
	(5,4,5,'09-16-2019'),
	(6,2,2,'09-16-2019'),
	(7,19,3,'09-16-2019'),
	(8,8,4,'09-16-2019'),
	(1,9,4,'09-16-2019'),
	(5,7,2,'09-16-2019');

--Delete Rats table
--NOTE: THIS IS PAINFUL because tracking the rats names was my favorite part of this DB
DROP TABLE Rats;

-- Item #2: Link Supplies or Services and have them be used in Sales
-- I believe already did this in the initial table creation... and population?
-- However, the receivables don't yet add to the inventory, and sales don't subtract from inventory....
-- I'm thinking this will come in a later class?

-- Item #3 I've already added FK and PK to every table on creation

-- Item #4
/** I already added the FK and PK to the Tavern and User Tables on creation, but the syntax
	to add it later is here:

CREATE TABLE Users(
	UserID int IDENTITY(1,1),
	UserName varchar(50) NOT NULL,
	UserInfo varchar(100),
	UserRole int NOT NULL
	);

CREATE TABLE Taverns (
	TavernID int IDENTITY(1, 1),
	TavernName varchar(50) NOT NULL,
	NumFloors tinyint NOT NULL,
	TavernLocation int NOT NULL,
    TavernOwner int NOT NULL
	);

ALTER TABLE Users
	ADD PRIMARY KEY (UserID),
	ADD FOREIGN KEY (UserRole) REFERENCES Roles(RoleID);

ALTER TABLE Taverns
	ADD PRIMARY KEY (TavernID),
	ADD FOREIGN KEY (TavernLocation) REFERENCES Locations(LocationID),
	ADD FOREIGN KEY (TavernOwner) REFERENCES Users(UserID);

**/


-- Item #5  Show constraints by making insertions or queries that will fail

--DROP TABLE Taverns;
--or
--INSERT INTO Service (ServiceName, ServiceStatusID) VALUES ('Database Creation', 10);
